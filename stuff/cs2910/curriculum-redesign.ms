.TL
A Gaping Hole in the Computer Science Core Curriculum
.AU
James Houghton
.AI
University of Virginia

30 April 2019
.SH
Preliminary Note
.PP
It is my opinion that Operating Systems should be a required course for all Computer Science majors from UVA. Currently this is not the case, as B.A. CS students do not need to take OS. My proposed additional course, although introduced in the context of Operating Systems, should be helpful for anyone studying CS. It is not strictly a preparatory course for Operating Systems, so this essay should be relevant for all CS majors at UVA.
.NH
The Operating System of a Student
.PP
A student's interest is like a fire: it usually comes from a spark, and if a course strangles them with work, that fire will be deprived of oxygen and will slowly die.
If any course is too difficult, students will be dissuaded from studying the topic further. If a course is full of work that has little to do with the material being taught, students will not learn efficiently and will be disappointed. I have, dare I say it, a little too much experience with classes like these.
Operating Systems, for some students, fits into both of these categories.
One of the goals of teaching is to spark interest where there otherwise might not be any, and for many students in Operating Systems, I don't see a spark.
.PP
Many students see OS as a class to satisfy a requirement, a class to pass and pass only. They go into it thinking it will be their hardest class at UVA. They submit assignments late because they know they'll get a low grade anyway. These students have already set themselves up to fail, and unfortunately, some of them do fail.
This behavior is not entirely the fault of the students. There are many reasons this is happening, and it can't be fixed in one semester.
.PP
Most of my interaction with OS students has been in the context of the homework assignments, perhaps the most challenging part of the current OS course.
The homework assignments are designed to help the students learn the topics more deeply. For some, these assignments are very effective. For others, they get bogged down in code they don't fully understand, trying to intricately express themselves in a language they have little experience in.
For these students, being asked to write a shell (an assignment given at the beginning of the semester) is like being asked to write a 20-page essay in a foreign language you have only taken one course in.
In our case, the language is C++, the 20-page essay is a 400-line program, and the one course is CS 2150.
.PP
One need not to be an expert in C++ to complete the assignments given in OS, but the students must know how to express themselves in the language. In other words, they need to already know how to write expressive (or intent-based) programs, what most people call "clean code."
It's not easy, and it only really comes with experience.
I'm not just talking about figuring out how pointers work, but also knowing how to structure a program, and having enough knowledge of the C++ standard library to be able to take advantage of it.
It is impractical to expect a student whose only C++ experience is from CS 2150 to be comfortable enough in the language to be able to complete the assignments asked of them.
Students with such limited experience usually end up writing programs that are twice as long as they otherwise would be, extremely hard to read, and littered with bugs.
It is not wrong to fail these students, and if this means staying another semester, so be it. Like Dr. Brunelle, I see OS as a necessary part of the CS curriculum.
.NH
What Should Be Done
.PP
I have come to the conclusion that our Computer Science department is not adequately preparing some of its students for Operating Systems. CS 2150 simply tries to teach too much. Many students pass the class even without absorbing much of the material. Remember: a course that tries to teach too much will eventually extinguish any interest in the topics it covers.
The expectation is that the students have a solid grasp of data structures, C/C++ program representation, and C/C++ fluency, but reality never conforms to expectations.
.PP
CS 2150 is already being broken up into multiple classes, so I will not focus on what needs to be removed from it. Instead, I will focus on what I want to see covered in a course of its own.
The Computer Science department should offer and whole-heartedly endorse at least one new course that does the following:
.nr step 1 1
.IP \n[step]. 3
Gives students more experience with writing expressive programs. Code submissions should be graded on readability and beauty, just like an English essay.
.IP \n+[step].
Requires the students to learn when and how to use large libraries. As a baseline example, students should be familiar with the various features of the C++11 standard library.
.IP \n+[step].
Strongly promotes (or even requires) preparing to write a program before sitting down to write it. For some students, this will be a real challenge, but as I've seen many times in OS, thinking first and coding second is
.I always
faster than coding without first thinking.
.LP
With a course like this, students should be prepared to succeed in OS and feel as such.
This course would not just a preparatory course in OS, but a course that should adequately prepare students to tackle the various complex programming challenges they may face in their careers.
This course is not intended to be a replacement for CS 3240 (Advanced Software Development Techniques), but indeed a complementary course.
.PP
It is my opinion that Operating Systems as a course has very little wrong in design. Its material is supposed to be difficult to fully grasp. When students are not encumbered by inexperience, OS will cease to be overly difficult, and its reputation as the impossible class will slowly fade.
.PP
Perhaps seemingly contrary to my argument, my proposed course should not be required for all students. It should be strongly encouraged, especially for students who have not studied Computer Science extensively outside of class. Some students, however,
.I already
have the experience necessary to succeed in OS, and there is no reason to slow down their learning. Given the generous course drop deadline for CS courses, a student should be able to adequately judge whether or not they should take this new course.
.PP
I hope such a course is added soon. As a TA, I only want the best for my students. I sincerely believe that my current students would have been able to benefit greatly from such a course. Even though many of them are graduating and moving on to careers in industry, it is not too late to experiment with courses to help many of our current and future undergraduates. In the meantime, you can find me teaching my own miniature version of this course in my office hours.
